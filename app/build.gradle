apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.getkeepsafe.dexcount'

apply from: '../deps.gradle'

ext {
    APPLICATION_ID = "com.b_designworks.android"
    isCI = "true".equals(System.getenv("CI"))
    BUILD_NUMBER = System.getenv("CIRCLE_BUILD_NUM") ?: new Date().format('yyyy-MM-dd-HH:mm:ss')
    LAST_COMMIT_MESSAGE = 'git log -1 --pretty=%B'.execute().text.trim()
}

android {
    compileSdkVersion versions.TARGET_SDK_VERSION
    buildToolsVersion versions.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion versions.MIN_SDK_VERSION
        targetSdkVersion versions.TARGET_SDK_VERSION

        ext.betaDistributionReleaseNotes = LAST_COMMIT_MESSAGE
        ext.betaDistributionNotifications = true

        applicationId APPLICATION_ID
        versionCode 1
        versionName "1.0.0-$BUILD_NUMBER"

        def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    productFlavors {
        staging {
            buildConfigField "String", "API_URL", "\"https://b-designworks.herokuapp.com/\""
            applicationIdSuffix ".staging"
        }

        production {
            buildConfigField "String", "API_URL", "\"https://b-designworks.herokuapp.com/\""
        }
    }

//    signingConfigs {
//        release {
//            def props = new Properties()
//            props.load(new FileInputStream(file("$rootDir/keys.properties")))
//            storeFile file("$rootDir/your.jks")
//            storePassword props['storePassword']
//            keyAlias props['keyAlias']
//            keyPassword props['keyPassword']
//        }
//    }

    buildTypes {
        debug {}
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries = !isCI
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        textReport true
        textOutput "stdout"
        lintConfig file("$projectDir/lint.xml")
        warningsAsErrors true
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

configurations.all {
    resolutionStrategy {
        force supportLibs
        force "com.android.support:design:$versions.support"
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

dependencies {
    compile supportLibs
    compile rxJavaLibs
    compile retrofitLibs
    compile okHttpLibs

    compile 'com.jakewharton:butterknife:7.0.0' // view injection
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.f2prateek.dart:dart:1.1.0' // activity arguments arguments inject
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'fr.avianey.com.viewpagerindicator:library:2.4.1.1@aar'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.yalantis:ucrop:2.2.0'

    compile 'io.smooch:core:latest.release'
    compile 'io.smooch:ui:latest.release'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }

    testCompile androidTestsLibs
    testCompile supportLibs
}

apply from: "quality.gradle"
